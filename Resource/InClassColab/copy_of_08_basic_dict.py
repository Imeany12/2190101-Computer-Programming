# -*- coding: utf-8 -*-
"""Copy of 08-basic_dict.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ouHVBrz6tYGziCW769HzqpLPMuo6GzRU

# 08-Basic dict

## list vs dict

A `list` is a collection of items in particular order from left to right.  List uses integer number as an index to access the data.<br>

A `dict` is a collection of `key:value` pairs. Each `key` is connected to a `value`.
"""

x = ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", \
     "FRIDAY", "SATURDAY", "SUNDAY"]
print(type(x), x)
print(x[0], x[4], x[-1])

d = {"MO":"MONDAY", "TU":"TUESDAY", "WE":"WEDNESDAY", "TH":"THURSDAY", \
     "FR":"FRIDAY", "SA":"SATURDAY", "SU":"SUNDAY"}
print(type(d), d)
print(d["MO"], d["WE"], d["SU"])

d

"""## creating a dict

dict works like a mapping function from key to its value. <br>
`{ key1:value1, key2:value2, ... }`

keys must be uniqued. Values can be duplicated. <br>

Key can be string, int.  Value can be any data type.

####**Important!!**

Even though, in Python 3.7 the order of the keys stored are the same as when created, but it does not guarantee that this behavior will remain in the future. When we work with `dict`, the order of the keys might be different each time the program is running.  If we need to guarantee the sequence in some order, we have to move the data to a list and sort in the order that we want.

Try 
https://www.jdoodle.com/python3-programming-online/ and change Python runtime to 3.5.1 to see this behavior.
"""

!python --version

grades = {"1001": "A", "1002": "A",
         "1003": "B", "1004": "C",
         "1005": "B", "1006": "A"}

for k in grades:
  print(k, grades[k])

"""key can be float, but may have something unexpected due to approximation."""

d = {0.1:'a', 0.2:'b', 0.3:'c', 0.4:'d', 0.5:'3'}
x = 0.1
d[x]

x += 0.1
d[x]

x += 0.1
d[x]

"""empty list & empty dict"""

empty_list = []
another_empty_list = list()
empty_dict = {}
another_empty_dict = dict()

print(type(empty_list), empty_list)
print(type(another_empty_list), another_empty_list)
print(type(empty_dict), empty_dict)
print(type(another_empty_dict), another_empty_dict)

"""### Example: creating a dict
Create a variable named `d236` to be a `dict` that has three key, value pairs which are "TWO", "THREE", and "SIX" for keys and the corresponding values are 2, 3, and 6. 


"""

d236 = { "TWO":2, "THREE":3, "SIX":6}
d236

"""d236x = { 2:"two", 3:"three", 6:"six"}
d236x.keys()

### Exercise 8-1

Write a program that reads one line of input as airport code and province name separated by space to create a dict airports = {"BKK":"Bangkok", "DMK":"Bangkok", "HKT":"Phuket", "CNX":"Chiangmai" }
"""

x = input()
# BKK Bangkok DMK Bangkok HKT Phuket CNX Chiangmai
x = x.split()
#for i in range(0,len(x),2) :
#  airports = {x[i]:x[i+1]}
airports = { x[0]:x[1], x[2]:x[3], x[4]:x[5], x[6]:x[7]}

airports
print(airports['HKT'])

"""## Access data in dict

We can access data in a dict via its key.  If the key is valid, the value will be returned.  If the key is invalid (not in the dict), there will be an error, "KeyError". <br>

We can only get from key -> value. <br>
There is no value -> key.
"""

grades = {"6130186221": "A", "6230221221": "A",
          "6231009821": "B", "6230543921": "C",
          "6230431521": "B", "6230276821": "A"}
ID = input()
while ID != "q":
    if ID in grades:
      print(ID, "-->", grades[ID])
    else : 
      print("Not found")
    ID = input()

# access data in dict via key
grades['6130186221']

grades['6230431521']

# what happen when key is not in dict
grades['6231010921']

ID = input()
while ID != "q":
    print(ID, "-->", grades[ID])
    ID = input()

"""### `if k in dict / if k not in dict`

Before access the dict, you should make sure that the key to be accessed in in the dict.
"""

grades = {"6130186221": "A", "6230221221": "A",
          "6231009821": "B", "6230543921": "C",
          "6230431521": "B", "6230276821": "A"}

ID = input()
while ID != "q":
    if ID in grades:
        print(ID, "-->", grades[ID])
    else:
        print(ID, " not found")
    ID = input()

"""### Exercise 8-2

Create a variable named `count_alpha` as a dict that has key as all English alphabets (upper and lower cases), and has all values as 0.

"""

alphabets = 'abcdefghijklmnopqrstuvwxyz'
alphabets += alphabets.upper()
count_alpha = {}
for c in alphabets:
    count_alpha[c] = 0
count_alpha

"""### Exercise 8-3

This program has a variable named `student1` stores a student's data.  Write read_data() function that reads keyboard input that has student_id, first-lastname, birthdate, birthmonth, birthyear (separated by comma and space) then store s in a dict that similar to `student1` and return that as function's result.  For example, <br>

**Input**
- 4230000021, Natalie P., 9, 6, 1981

**Result from read_data**
- `{"ID": "4230000021", "Name":"Natalie P.", "Birthdate": [9, 6, 1981]}`


"""

def read_data():
    x = input().split(", ")
    d = {"ID": x[0],
         "Name": x[1],
         "Birthdate": [int(x[2]), int(x[3]), int(x[4])]}
    return d

student1 = {"ID": "5830000021", 
            "Name": "Pranpriya M.", 
            "Birthdate": [27, 3, 1997]}
student2 = read_data()
print(student2)

"""## Add/Update value in dict

When you assign a data to a key, if the key is not in dict, `key:data` will be added to the dict. If the key is already in dict, the data will  replace the original value.
"""

d = {}
d[2] = 'abc'
d

d['x'] = 5
d

d[3] = 0
d

d[2] = '+++'
d

grade = { }   # empty dict 
n = int(input())
for k in range(n):
  ID, g = input().split()
  grade[ ID ] = g
print(grade)

"""### Example: Voting

Have a list of names
Input name votes
```
BLACKPINK = ["Jisoo", "Jennie", "Rosé", "Lisa"]
Lisa Lisa Lisa Lisa Jennie Aum Jisoo Lisa
```
Show vote result

"""

BLACKPINK = ["Jisoo", "Jennie", "Rosé", "Lisa"]
votes = {}               # create empty dict
for name in BLACKPINK:
  votes[name] = 0      # add new key: value into dict
# {"Jisoo": 0, "Jennie": 0, "Rosé": 0, "Lisa": 0}

votes

names = input().split()
for name in names:
  if name in BLACKPINK:
    votes[name] += 1  # increment value

votes

for name in BLACKPINK:
  print(name, "-->", votes[name]) # get value

for name in BLACKPINK:
    if votes[name] > 4:
        print(name, "-->", votes[name])

"""### Exercise 8-4

Write a function `add(points, members, extra)` that takes
- a dict,  `points` that stores the data in the formate { member_id:point } 
- a list, `members` that stores member ids
- an integer, `extra` as reward points that will be added to dict `points` for each member specified in `members`

This function only updates `points` and will return nothing.

"""

# points -> { 'X001':200, 'X002':100, 'X003':1000, 'X004': 150}
# members -> ['X001', 'X003']
# extra -> 30
# points should be { 'X001':200+30, 'X002':100, 'X003':1000+30, 'X004': 150}
def add(points, members, extra):
    for member in members:
        if member in points:
            #points[member] = points[member] + extra
            points[member] += extra

x = { 'X001':200, 'X002':100, 'X003':1000, 'X004': 150}
y = ['X001', 'X003', 'X002']
z = 500
print(x)
add(x, y, z)
print(x)

"""## Access every key in dict

###`for each_key in a_dict`

Note: If this program is running with Python 3.7, the order of keys will be the same as the order of creating but it does not guarantee that this behavior will remain in later version of Python. (Python in Grader also has random order of keys)

"""

ordinal = {"first": 1, "second": 2, "third": 3, 
           "fourth": 4, "fifth": 5, "sixth": 6, 
           "seventh": 7, "eighth": 8,
           "ninth": 9, "tenth": 10 }

for key in ordinal:
  print(key, "-->", ordinal[key] )

"""### `dict.keys(), dict.values(), dict.items()`"""

ordinal.keys()

print(ordinal.keys())
print(sorted(ordinal.keys()))
for key in sorted(ordinal.keys()):    
    print(ordinal[key])

ordinal.values()

ordinal.items()

# create reverse_ordinal
reverse_ordinal = {}
for key, value in ordinal.items():
    reverse_ordinal[value] = key
reverse_ordinal

for key in sorted(reverse_ordinal.keys(), reverse=True):
    print(key, reverse_ordinal[key])

#sorted([[len(e), e] for e in ordinal])
print(ordinal)

print(sorted([[len(e), e] for e in ordinal], reverse=True))

for [x1, x2] in sorted([[len(e), e] for e in ordinal], reverse=True):
    print(x2, ordinal[x2])

"""### Exercise 8-5

Write a function `get_courseIDs(number_of_students, k)` where:
- `number_of_students` is a dict that stores data in format  {course_id: total_student_registered}
- `k` is an integer number

This function returns a list of all course ids that has total number of students registered at least `k` people.  The course ids should be sorted in ascending order. 
"""

def get_courseIDs(number_of_students, k):
    courses = []
    for key in number_of_students :
      if int(number_of_students[key]) >= k :
        courses.append(key)
    return sorted(courses, reverse=False)

d = {"2190101":"55", "2190415":"60", "2190443":"25"}
print(get_courseIDs(d,55))

"""## Examples

### Is a value in the dict?
"""

ordinal = {"first": 1, "second": 2, "third": 3, 
           "fourth": 4, "fifth": 5, "sixth": 6, 
           "seventh": 7, "eighth": 8,
           "ninth": 9, "tenth": 10 }

# is a key in dict?
'third' in ordinal
'forth' in ordinal.keys()

# is 3 in the dict's value?
3 in ordinal

3 in ordinal.values()

12 in ordinal.values()

"""### What are the keys that has value x"""

d = {'a':3, 'b':2, 'c':3, 'd':1, 'e':1}
x = 2
result = []
for k in d:
    if d[k] == x:
        result.append(k)
print(result)

x = 6
result = []
for k, v in d.items():
    if v == x:
        result.append(k)
print(result)

"""### Average value in a dict"""

def average( d ):   # d is a dict that have values as number
    # sum of all values / number of value
    total = 0
    for k, v in d.items():
        total += v
    return round(total/len(d), 2)

gpa = {"6130186221": 3.15, "6230221221": 2.85,
       "6231009821": 2.90, "6230543921": 3.20,
       "6230431521": 3.35, "6230276821": 3.42,
       "234234": 3.05}

print( average(gpa) ) # should be 3.145
len(gpa)

"""### Mapping x -> y, y -> x"""

d1 = {'2':'two', '3':'three', '4':'four'}
d2 = {'two':'2', 'three':'3', 'four':'4'}
x = input()
if x in d1:
    print(d1[x])
elif x in d2:
    print(d2[x])
else:
    print('not found')

"""### Show dict result in different order"""

d1 = {2:'two', 3:'three', 4:'four'}
d2 = {'two':2, 'three':3, 'four':4}

for k in sorted(d1.keys(), reverse=True):
    print(k, d1[k])

key_len = sorted([[len(e), e] for e in d2.keys()], reverse=True)
key_len

"""### dict access time"""

import time
def search_all(X):
  b = time.time()
  n = len(X)
  for i in range(n):
    if i in X:     # True
      pass
  for i in range(n):
    if (n+1) in X: # False
      pass
  print(time.time() - b)

n = 10000
L = []
for i in range(n): 
  L.append(i)
D = {}
for i in range(n): 
  D[i] = i

search_all(L)
search_all(D)

"""## Grader Exercises

### Using doctest() to run test cases

```
'''
>>> function_name(arg1, arg2)
expected_output1
>>> function_name(arg3, arg4)
expected_output2
'''

import doctest
doctest.testmod() # to tess all functions
doctest.run_docstring_examples(function_name, globals()) # to test a specific function
```

`doctest` **does not** work with `input()`.
"""

def add(x, y):
    '''
    >>> add(2, 3)  
    5
    >>> add(-2, 3)
    1
    '''
    return x + y

if __name__ == "__main__":
    import doctest
    #doctest.testmod()  # to test all functions
    doctest.run_docstring_examples(add, globals()) # to test a specific function
print('done')

"""### Alphabet count


```
Input: 
ABCabcABZ

Output:
a -> 3
b -> 3
c -> 3
z -> 1
```


"""

def show_dict(d):
    '''
    >>> show_dict(alphabet_count('ABCabcABZ'))
    a -> 3
    b -> 3
    c -> 2
    z -> 1
    '''
    for k, v in d.items():
        print(k, '->', v)

def alphabet_count(s):
    '''
    >>> alphabet_count('ABCabcABZ')
    a -> 3
    b -> 3
    c -> 2
    z -> 1
    '''
    alphabets = "abcdefghijklmnopqrstuvwxyz"
    alphabet_counts = {}
    for c in s.lower():
        if c in alphabets:
            # get something to count
            if c not in alphabet_counts:
                alphabet_counts[c] = 1
            else:
                alphabet_counts[c] += 1

    return alphabet_counts

import doctest
doctest.run_docstring_examples(alphabet_count, globals())
#doctest.run_docstring_examples(show_dict, globals())

"""### Two functions"""

# input:  { "A": "a", "B": "b", "C": "c" }
# result: { "a": "A", "b": "B", "c": "C" }
def reverse(d) : # d is a dict that has unique values
    r = {}

    return r

# find all keys that has same value, v
# return list of keys that has value equals to v
def keys( d, v ): 
    x = []

    return x

"""### Nickname, Fullname
Write a program that take nickname and display fullname or takes fullname and display nickname using dict

"""

def find_name(d) : # d is a dict with pairs fullname:nickname
    name = ''
    return name

names = {'Robert':'Dick', 'William':'Bill', 'James':'Jim', 'John':'Jack' \
         'Margaret':'Peggy', 'Edward':'Ed', 'Sarah':'Sally', \
         'Andrew':'Andy', 'Anthony':'Tony', 'Deborah':'Debbie'}

print(find_name('Robert'))) # Dick
print(find_name('Dick'))) # Robert
print(find_name('Steve'))) # Not found
'''
Robert	 ⇔ 	Dick
William	 ⇔ 	Bill
James	 ⇔ 	Jim
John	 ⇔ 	Jack
Margaret	 ⇔ 	Peggy
Edward	 ⇔ 	Ed
Sarah	 ⇔ 	Sally
Andrew	 ⇔ 	Andy
Anthony	 ⇔ 	Tony
Deborah	 ⇔ 	Debbie 
'''

"""### Ice cream sales
```
Input:
- n, number of ice cream types, follows by n lines of
- ice_creame_type item_price

- n_sold, number of item sold, follows by n_sold lines of 
- ice_cream_type amount_sold

Output:
Total ice cream sales = ...
```
"""

# get input and create an ice_cream_price dict {icecream_type:price}