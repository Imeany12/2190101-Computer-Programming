# -*- coding: utf-8 -*-
"""Copy of NumPy_ToStudent.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1weTOTbFEuJnXCQ1nzac6xPgpIsv7Q8vZ

# Numpy
"""

# !pip install numpy

"""## Topics
* Recap about flowchart
* while loop
* for loop
    -  for k in range(…)
    -  for ch in setting
    -  for elem in a_list
* break
* nested loop

## Examples and Pratices
"""

import numpy as np
a = np.array([[1,2],[3,4]])
print(a)
print(a[1,1])
print(a[(1,1)])

"""### List vs. Numpy Array: all pair distances"""

# All pair distance using List

def all_pair_distances(points):
    # points are nested list, e.g., [[0,0],[0,3],[4,0]]
    n = len(points)
    D = [[0.0] * n for i in range(n)]
    for i in range(n):        
        for j in range(i+1, n):   
            dx = points[i][0] - points[j][0]
            dy = points[i][1] - points[j][1]           
            D[i][j] = D[j][i] = (dx**2+dy**2)**0.5 
            
    return D

points = [[0,0],[0,3],[4,0]]
print(all_pair_distances(points))

# All pair distance using NumPy
import numpy as np

def all_pair_distances_numpy(points):
	# points are array
    n = len(points)
    npoints = np.array(points) #initialize list as array
    X = npoints[:, 0] #iterate over first element of each subarray
    Y = npoints[:, 1]
    dx = X - X.reshape(n, 1)
    dy = Y - Y.reshape(n, 1)
    D = (dx**2+dy**2)**0.5
    return D

points = [[0,0],[0,3],[4,0]]
print(all_pair_distances_numpy(points))

"""### Array constructions"""

import numpy as np

a = np.array([1,2,3,4])     # constructed from list
b = np.array([[1,2],[3,4]])   # constructed from list
c = np.ndarray((2,3))       # constructed by size 
#cc = np.ndarray((1,2))  
d = np.ndarray((2,3), int)
e = np.zeros((2,3), int)    # constructed by size with all 0
f = np.ones((2,3), int)     # constructed by size with all 1
g = np.zeros_like(f, float) # constructed as f with all 0 float
h = np.ones_like(e, float)  # constructed as e with all 1 float
I = np.identity(4, int)     # constructed an identity matrix 
                            # with size 4 x 4
x = np.arange(0.0,1.0,0.1) # [0.0,0.1,…, 1.0] 

print("a=", a)
print("b=", b)
print("c=", c)
#print("cc=", cc)
print("d=", d)
print("e=", e)
print("f=", f)
print("g=", g)
print("h=", h)
print("I=", I)
print("x=", x)

"""### Array shapes"""

a = np.arange(8)
print("a=", a)
b = a.reshape((2,4))
print("b=", b)
c = b.reshape((4,2))
print("c=", c)
d = c.reshape(8)
print("d=", d)
d = c.reshape((2,3))
print("d=", d)   # ERROR

"""### Array Transpose"""

a = np.arange(8)
print("a = ", a)
print("a.T = ", a.T)
b = a.reshape((2,4))
print("b = ", b)
print("b.T = ", b.T)
c = a.reshape((1,8))
print("c = ", c)
print("c.T = ", c.T)

"""### Indexing"""

import numpy as np

def count_ones(A):
    c = 0
    for i in range(A.shape[0]):
        for j in range(A.shape[1]):
            if A[i,j] == 1:
                c += 1
    return c

a = np.array([[1,2,1],[4,1,6],[7,1,9],[1,11,12]])

print(count_ones(a))

"""### Slicing : start: stop: step"""

# a as nested list
print('----- a as list -----')
a = np.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])
print(a[::2])
print(a[::2][::2])

# A as NumPy array
print('----- A as NumPy array -----')
A = np.array(a)
print(A[::2])
print(A[::2][::2])
print(A[::2,::2])
print(A[::-1,::-1])

"""### Fancy Indexing"""

a = np.arange(0, 100, 10)
print(a)
b = a[0::2]
print(b)
c = a[[8, 1, 9, 0]]
print(c)
d = c[[True,False,False,True]]
print(d)

A = np.array([[1,2,3],[4,5,6],[7,8,9],[0,1,0]])
print(A)
B = A[[1,3,2], [2,0,1]]
print(B)

"""### *** Practice #1 ***
A is a 2D array
Fill in the following functions
"""

import numpy as np
A = np.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])

#***** Write youtr codes here *****#

def get_column_from_bottom_to_top(A, c): # one line of code
    return  A[:, c][::-1]

def get_odd_rows(A): # one line of code
    return A[1::2]

def get_even_rows_last_column(A): # one line of code
    return A[::2,-1]

def get_diagonal1(A): # A is a square matrix; two lines of code
    return np.diag(A)

def get_diagonal2(A): # A is a square matrix; two lines of code
    return np.diag(A[::-1][::-1])

print(A)
print(get_column_from_bottom_to_top(A,0))
print(get_odd_rows(A))
print(get_even_rows_last_column(A))
print(get_diagonal1(A))
print(get_diagonal2(A))

"""### Assign scalar value into array"""

A = np.zeros(8)
A[2:5] = 9 
print(A)
A

A = np.ndarray((4,4), int) 
A[:,:] = 9
print(A)
A

B = np.zeros((4,4), int)
B[:,0::2] = 1
B[1::2,:] = 2              
print(B)
B

"""### Calculation using Array data with scalar!"""

a = np.array([1,2,3,4,5])
print(a)
b = a + 1 
print(b)
c = a**2 + 1      
print(c)
d = a/2       
print(d)

def toCM(inches):
	return inches * 2.54

d = np.array([0, 10, 12, 100])
print(toCM(d))

"""### Several math functions in NumPy"""

a = np.array([10,100,1000,10000])
print(a)
b = np.log10(a)   	# [1. 2. 3. 4.]
print(b)

c = np.array([np.pi, 2*np.pi, 3*np.pi])
print(c)
d = np.sin(c/2)
print(d)

"""### Array and scalar comparison"""

a = np.array([1,2,3,4])
b = a > 3
print("b=", b)
c = a%2==1
print("c=", c)

def count_odds(a):
    return sum(a%2==1)
def get_odds(a):
    return a[a%2==1] # select only True elements
def get_odd_positions(a):
    pos = np.arange(a.shape[0])
    return pos[a%2==1]

a = np.array([1,2,3,4,5,6,7,7,8,9])
print(count_odds(a))
print(get_odds(a))
print(get_odd_positions(a))

"""### *** Practice#2 ***"""

#***** Write youtr codes here *****#

def toCelsius(f):
    # f = [temperature in Fahrenheit, …]
    return (5/9)*(f-32)

def BMI(wh):
    # [[w1,h1],[w2,h2], …]
    return wh[:,0]/(wh[:,1]/100)**2


def distanceTo(P, p):
    # distance from p to al points in P
    return ((p[0]-P[:,0])**2 + (p[1]-P[:,1])**2)**0.5



"""### *** Practice#3 : Logistic Regression ***

The probability p(x) that a student x  will pass the subject, based on the 
number of exercises he/she practiced and his/her GPAX is calculated
as follows:  
<img src="https://drive.google.com/uc?id=1ddC6zKylvAvMacFGOY7X5Cu8VqEcDojH" width="300px" />

You task: write a python program to read the number of done exercises and 
GPAX of a set of students and print out the p(x) for each student.

"""

# Write your code for Practice#3 here. You can use the following x as your input data
x = np.array([[7, 3.4],[8,3.7],[2,2.3],[10,3.6],[1, 3.7],[2,2.2]])
a = np.zeros(6)
a = a[:]

"""### Element-wise Operations"""

x = [1,2,3]
y = [4,5,6]
z = x + y   # plus operator here works as concatenation
print(z)

u = np.array([1,2,3])
v = np.array([4,5,6])
w = u + v  # element-wise addition
print(w)

A = np.array([[1,2,3],[4,5,6],[7,8,9]])
I = np.identity(A.shape[0], int) 
B = I*A  # element-wise multiplication

print(B)

"""### Element-wise Logical Operators"""

a = np.array([9,3,0,2,6])
b = a[a<5]
b = a[[False,True,True,True,False]]
print(b)

b = a[(2 < a) & (a < 5)]
print(b)

#a[[T,T,F,F,T] & [F,T,T,T,F]]
#a[[F,T,F,F,F]]
# [3]

"""### Matrix translation

<img src="https://drive.google.com/uc?id=1XicKAfNL1WYDxIgFghu0DG_p_pZ8l_SB" width="500px" />
We would like to move all points to the right 7 steps and to downward
3 steps. Hence, we need to add all points with [7, -3]
"""

M1 = np.array([[-7,2],[-5,7],[-1,0]])
T  = np.array([[7,-3],[7,-3],[7,-3]])
M2 = M1+T
print(M2)

"""### *** Practice#4 : Sum sub matrices ***

<img src="https://drive.google.com/uc?id=1rTnYwrbiosADrJ8GnFQ5jZtRPFKb6nij" width="400px" />
"""

# Given a matrix with teh following values
M = np.array([[1,2,3,4,5,6],[7,8,9,10,11,12],[13,14,15,16,17,18],[19,20,21,22,23,24],[25,26,27,28,29,30],[31,32,33,34,35,36]])

# Write your code for 
def sum_2_rows(M):
    
    return

# Write your code for 
def sum_left_right(M):
    return np.sum(M[:,0:len(M)//2]),np.sum(M[:,len(M)//2])
print(sum_left_right(M))

# Write your code for 
def sum_upper_low(M):
    return

# Write your code for 
def sum_4_quadrants(M):
    return

# Write your code for 
def sum_4_cells(M):
    return

"""### Broadcasting

<img src="https://drive.google.com/uc?id=1XicKAfNL1WYDxIgFghu0DG_p_pZ8l_SB" width="500px" />
We would like to move all points to the right 7 steps and to downward
3 steps. Hence, we need to add all points with [7, -3]

Redo matrix translation using brodcasting
"""

# Previous code

#M1 = np.array([[-7,2],[-5,7,[-1,0])
#T  = np.array([7,-3],[7,-3],[7,-3])
#M2 = M1+T

# New code using broadcasting
M2 = M1 + np.array([7,-3])
print(M2)

"""### Broadcast smaller dimension size to a bigger one (1)
<img src="https://drive.google.com/uc?id=1JUns6zCrAZCUhiOwbrzFzEzT_ADAwsu9" width="250px" />
"""

x = np.array([[1,2],[3,4],[5,6]])
u = np.array([2]) + x
print(u)

"""### Broadcast smaller dimension size to a bigger one (2)
<img src="https://drive.google.com/uc?id=1zZCJIfvFmQUOUH4GXhHgYWFD6GTnARS5" width="250px"/>
"""

x = np.array([[1,2],[3,4],[5,6]])
u = np.array([10,20]) + x
print(u)

"""### broadcast smaller dimension size to a bigger one (3)
<img src="https://drive.google.com/uc?id=15YakckBLo1YmB5ME0QLgKuBf7AQH4h3P" width="250px"/>
"""

x = np.array([[1,2],[3,4],[5,6]])
u = np.array([[10],[20],[30]]) + x
print(u)

"""### *** Practices#5 : Multiplication Table***
Write a program to construct a multiplication table using NumPy array
and not using any loops.
<img src="https://drive.google.com/uc?id=16C0dBclY9OrP6mgDyeUm0qyNLJZ-SHaw" width="450px"/>
"""

# Write your code here!!
def mult_table(n):
    rng = np.arange(1, n+1)
    return rng * rng[:, None]

"""### Interesting functions in NumPy

#### np.sum 
<img src="https://drive.google.com/uc?id=1z-tkHaMMmuPEoh0NgOWEXSXiI-shTL1x" width="400px"/>
"""

a = np.array([[1,2,3,4,5],[10,9,8,7,6],[11,12,13,14,15],[20,19,18,17,16]])

np.sum(a,axis=1)

np.sum(a,axis=0)

np.sum(a)

"""#### np.min
<img src="https://drive.google.com/uc?id=18bkuG_JwB0z317Zz2EmdDY-tUF4F7ap8" width="400px"/>
"""

np.min(a,axis=1)

np.min(a,axis=0)

np.min(a)

"""#### How about np.max?"""

np.max(a,axis=1)

np.max(a,axis=0)

np.max(a)

"""#### np.argmin
<img src="https://drive.google.com/uc?id=1KqNdLfg9_KxBRae2JdPGVH2qwmQSIoVa" width="400px"/>
"""

np.argmin(a,axis=1)

np.argmin(a,axis=0)

np.argmin(a)

"""#### How about np.argmax?"""

np.argmax(a,axis=1)

np.argmax(a,axis=0)

np.argmax(a)

"""#### np.mean
<img src="https://drive.google.com/uc?id=1ja9_QB1VvMOZ4TWZqUfMjPvVer-Cxnnd" width="400px"/>
"""

np.mean(a,axis=1)

np.mean(a,axis=0)

np.mean(a)

"""#### How about np.std?"""

np.std(a,axis=1)

np.std(a,axis=0)

np.std(a)

"""#### np.dot
1. np.dot(vector, vector) 
2. np.dot(vector, matrix)
3. np.dot(matrix, matrix) : matrix multiplication
"""

# 1 np.dot(vector, vector)
x = np.array([1,2,3])
y = np.array([4,5,6])
np.dot(x,y)

# 2.1 np.dot(vector, matrix)
x = np.array([1,2,3])
y = np.array([[4,7],[5,8],[6,9]])
np.dot(x,y)

# 2.2 np.dot(vector, matrix)
x = np.array([[1,2],[3,4],[5,6]])
y = np.array([2,3])
np.dot(x,y)

# 3 np.dot(matrix, matrix) : matrix multiplication
x = np.array([[1,2,3],[4,5,6]])
y = np.array([[7,8],[9,10],[11,12]])
np.dot(x,y)

"""#### Either np.???(a,b) or a.???(b) is fine"""

x = np.array([[1,2,3],[4,5,6]])
y = np.array([[7,8],[9,10],[11,12]])

a = np.dot(x,y)
print(a)
a = x.dot(y)
print(a)

b = np.sum(x,axis=0)
print(b)
b = x.sum(axis=0)
print(b)

c = np.mean(x,axis=1)
print(c)
c = x.mean(axis=1)
print(c)

"""### Total Weekly Income
<img src="https://drive.google.com/uc?id=1SMOfef_jtSpSSpNA63DKCNRyd5MzbLom" width="600px"/>

"""

prices = np.array([25,30,45])
dailysales = np.array([[75,120,70,90,80],[80,90,100,70,50],[50,45,70,65,50]])

dailyincomes = np.dot(prices, dailysales)
print(dailyincomes)

weeklyincome = np.sum(dailyincomes)
print(weeklyincome)

dailyaverage = np.average(dailyincomes)
print(dailyaverage)

best_day_index = np.argmax(dailyincomes)
print(best_day_index)

"""<img src="https://drive.google.com/uc?id=1ynsOa74zOyDqjIodw9YRJx0fLZDHmPYr" width="250px"/>"""

def report(prices,dailysales,breakeven):
    days = ["MO", "TU", "WE", "TH", "FR"]
    menus = ["M1", "M2", "M3"]
    dailyincomes = np.dot(prices,dailysales)
    for i in range(len(days)):
        print(days[i], "-->", dailyincomes[i])
    print("weekly income = ", np.sum(dailyincomes))
    print("daily average = ", np.mean(dailyincomes))
    print("best sales day = ", days[np.argmax(dailyincomes)])
    loss = np.array(days)[dailyincomes < breakeven]
    print("Sales loss on:", ", ".join(loss))
    print("---------------------")
    menuincomes = np.sum(dailysales,axis=1) * prices
    for i in range(len(menus)):
        print(menus[i], "-->", menuincomes[i])
    print("Best menu =", menus[np.argmax(menuincomes)])

breakeven = 7500
report(prices, dailysales, breakeven)

"""### *** Practice#6 ***
Which students got the total scores less than the average total score of all students? 
"""

data = np.array([[610011, 80, 90, 70],
                [610022, 50, 80, 68],
                [610033, 70, 85, 80],
                [610044, 60, 50, 90],
                [610055, 90, 74, 70]])
print(data)
weight = np.array([0.3, 0.5, 0.2])
print(weight)

# Write your code here!!!

"""## Activities

### Array creation and reshaping

#### Use NumPy to create the following arrays withour loop 
   1. a0 : read a line of integers, each is separated by a space, from keyboard, and create a 1D array
   2. a1 : 3x4 array with all 0.0
   3. a2 : 4x2 array with all 1
   4. a3 : a vector with 4 elements containing values 2, 13, 4, 9
   5. a4 : 1x4 array with values 2, 13, 4, 9 
   6. a5 : a vector with 100 elements containing values 1.00, 1.01, 1.02, ..., 1.99
   7. a6 : an identity matrix of size 10x10
   8. a7 : a 10x7 array of float datatype without setting any initial values
"""

# Write your code here
import numpy as np

"""#### Write functions : 
1. number_of_rows(M)
2. number_of_cols(M) 
Which gets a matrix M and returns number of rows and columns, respectively. 
"""

# Write your code here
import numpy as np

def number_of_rows(M):
    return
def number_of_cols(M):
    return

"""#### Write function:
Normally, if A in a 1D array, e.g., A = np.array([1,2,3]), A.T will get the same result. 
However, in this activity, you are asked to write a transpose() function as described below. 
1. transpose(A) gets a 1D array and returns an array that is a transpose of A, as follows:
transpose(np.array([1,2,3]) will get np.array([[1],[2],[3]]). Note, you must not use loops. 
"""

# Write your code here
import numpy as np

def transpose(A):
    c = A.reshape((A.shape[0],1))
    return c

A = np.array([1,2,3])
print(A.T)
print(transpose(A))

"""#### Write a function
Create a 20x10 array, which keep integers, where a[k] has values [10k, 10k+1, 10k+2,..., 10k+9]. Note, you must not use loops. 
"""

# Write your code here

"""### Array indexes and slices

#### Create a 2D array A from the following input from keyboard. 
1. The first line contains number of row and column of the matrix, separarted by a space. 
2. There are r more lines, each consists of c values, separated by space.
"""

# Write your code here
import numpy as np

"""#### Given A as a 2D array with the even number of both rows and columns, create a new array from array A with the following conditions. Note, you must not use loops. 

1. a0 contains only the bottom right value of A
2. a1 contains all columns of the even rows of A
3. a2 contains only odd columns of all rows of A
4. a3 contains only even columns of the first row of A
5. a4 contains only column 1 of all odd rows of A
6. a5 contains all values in quadrant 2 of A, assuming that A can be equally divided into quadrants
7. a6 contains all values in quadrant 4 of A, assuming that A can be equally divided into quadrants
8. a7 contains all columns of the first and last rows of A
9. a8 contains only the first and last columns of all rows of A
10.a9 contains all rows and columns of A except row 4
"""

# Write your code here
import numpy as np

"""#### Write a function submatrix(M, i, j), where M is a matrix, i and i are indexes. 
This function will return a sub-matrix within M that does NOT include all columns in row i and all rows of column j of M.
For example, submatrix(np.array([[1,2,3,4],[5,6,7,8],[4,3,2,1],[8,7,6,5]]), 1, 2) will generate np.array([[1,2,4], [4,3,1], [8,7,5]]) Note that loops are not allowed.
"""

# Write your code here. 

import numpy as np

def submatrix(M, i, j):
    return

"""### Scalar operations

#### Assign the value to variable y so that 

yi = 2(xi)**2 - 5 for all i. Note that you need to change only the ..... in the following given code.
"""

# Complete the following code

import matplotlib.pyplot as plt
import numpy as np

x = np.arange(-5.0, 5.0, 0.1)
# y = .....

plt.plot(x, y)
plt.show()

"""#### Assign the value to variables x and y in the following code.
Where x contains the angles 0, 1, 2, ..., 360, and y contains the sin(x), i.e., yi = sin(xi) for all values of i.
Note that you need to change only the two lines of codes with ..... in the following given code. 
"""

# Complete the following code

import matplotlib.pyplot as plt
import numpy as np

# x = .....
# y = .....

plt.plot(x, y)
plt.show()

"""#### Write instructions to create an array with the following conditions (Loops are not allowed)
1. a1 is a 10x10 array, with all values as -3.
2. a2 is a 10x10 array, where all columns of even rows contain 2 and all columns of the odd rows contain 7. 
3. a3 is a 10x10 array, where the diagonal values are 9 while all other cells are 0. 

"""

# Write your code here
import numpy as np

"""#### Given A in a 1D array, write the instructions to create a new array from A as follows. (Loops are not allowed)
1. a1 contains the number of values that are negative in A.
2. a2 is the array containing all negative values from A. Order of the values are the same as of. 
3. a3 is the array containing the indexes of all negative values in A. Order of the values are the same as of A.
4. a4 is the array containing all values between -5 and 5 in A. Order of the values are the same as of A.

"""

# Write your code here. 
import numpy as np

"""#### Write function clip_to(x, e), where x is a 1D array and e is a number. (Loops are not allowed)
This function will change the value of e to x if x is greater than e. 
This function does not return anything. 

"""

# Write your code here. 
import numpy as np

def clip_to(x,e):
    pass
"""#### Write functon to_second(hms).
This function get hms as a nx3 array, where each row contains 3 values of hours, minutes, and seconds, and returns 
a 1D array with n integer values, where the kth value will keep the total seconds, calculated from the kth row of the hms. 
Note that loops are not allowed. 
"""

# Write your code here
import numpy as np

def to_second(hms):
    
    
    return

"""#### Write function to_hms(seconds) 
This function gets second as a 1D array of size n, where each cell contains the number of seconds. 
This function returns a nx3 array where each row contains three values in the order of hours, minutes, and seconds,
translated from each value in the seconds. 
For example, 3661 seconds is translated into 1 hour, 1 minute and 1 second. 
Note that loops are not allowes. 
"""

# Write your code here

import numpy as np

def to_hms(second):
    
    
    return

"""### Element-wise operations

#### Given the 2D arrays  A, B, C and D where all arrays have the same dimensions, write the instructions to create an array E with the same dimensions as of those four arrays, where Ei,j is equal to (Ai,j + Bi,jCi,j) / Di,j. Loops are not allowed.
"""

# Write your code here.

"""#### Given a 1D array A containing integers, create the following arrays. Loops are not allowed

1. B contains the values of A, which are between 10 and 20. Values in B are ordered as of A. 
2. C contains the values of A, which are divisable by 3 or 7. Values in C are ordered as of A.  


"""

# Write your code here.

"""#### Write function asterisk(A) 
This function gets a nxn array A (where n is an odd number) and returns an array with the same size of A. 
This new array must have the same values of A in the two diagonals, the middle row, and middle column shown as the white cells of the below figure. All other cells must be 0. Note that loops are not allowed. 

<img src="https://drive.google.com/uc?id=1Y9wtCJ5gUIqo9OMbt_5qgphuVvu8SKfx" width="250px"/>
"""

# Write your code here
import numpy as np

def asterisk(A):
    
    return

"""### Broadcasting

#### Write function translate(P, d)
where P is a nx2 array and d is a 1D array with two elements. 
This function creates and returns a 2D arary Q with the same size as P, where Qk,0 = Pk,0 + d0 and Qk,1 = Pk,1 + d1 for all rows k of P. Loops are not allowed.
"""

# Write your code here.
import numpy as np

def translate(P, d):
    
    return

"""#### Write function translate(P, d)
where P is a 2xn array and d is a 1D array with two elements. This function creates and returns a 2D array Q with the same size as P, where  
Q0,k = P0,k + d0 และ Q1,k = P1,k + d1 for all columns k of P. Loops are not allowed. 
"""

# write your code here
import numpy as np

def translate(P, d):
    
    return

"""#### Create an array A with the same size and values as shown below using broadcasting. Loops are not allowed
<img src="https://drive.google.com/uc?id=1w_hHGMbkqdNsPoTUARf7VGubq0Xk1bzX" width="150px"/>
"""

# Write your code here

"""#### Create an array A with the same size and values as shown below using broadcasting. Loops are not allowed
<img src="https://drive.google.com/uc?id=1w4M5pdHKxhD02D_6P1d0hyfu5kiIkOw2" width="150px"/>


"""

# Write your code here

"""#### Create an array A with the same size and values as shown below using broadcasting. Loops are not allowed
<img src="https://drive.google.com/uc?id=1ph2HXjizer12y_bOF-J6e9495-_5eMVy" width="250px"/>
"""

# Write your code here

"""#### Write function upper_tri_true(n)
This function gets an integer n to create and return a nxn array, which contains True (T) values in all cells with the indexed row not greater than the indexed column. Other all cells will be False (F). For example,  upper_tri_true(7) will return the array as shown below. Loops are not allowed. 

<img src="https://drive.google.com/uc?id=1IvLbi0vw0WD-v8KN4OXRWv3wzy08Z6_Q" width="250px"/>
"""

# Write your code here

"""### Basic NumPy statistical functions

#### Given A as a 10x8 array of integers, write the instructions to assign the values for the following variables. Loops are not allowed. 
1. s1 is summation of all values in A. 
2. s2 is a 1D array with 8 elements, where each is the summation of the same columns across all rows in A. 
3. m3 is a 1D array with 10 elements, which each is the maximum value of each row in A. 
4. m4 is a 1D array with 8 elements, where each is the index of row with the maximum value in each column of A. 
5. a5 is the 1D array with 10 elements, where each is the average of all values within each row of A.
"""

# Write your code here

"""#### Write function eq_array(A, B)
which gets arrays A and B and checks if the two arrays are the same or not 
The "same" in this context means the two arrays have the same size and all values within the two arrays are the same. Loops are not allowed. Note that we cannot use only A==B, why?

"""

import numpy as np

def eq_array(A, B):

    return

"""#### Write function z_scores(x)
which gets a 1D array x containing the scores and returns a 1D array containing the z-score where 
zi = (xi - μ)/σ, μ and σ is mean and standard deviation of x. Note that loops are not allowed. 
"""

# Write your code here
import numpy as np

def z_scores(x):

    return

"""#### Write function nearest(x,e)
which gets a 1D array x and e is a number. 
This function will return x that is closest to e. For example,
nearest(np.array([10, 30, 3, 4, 9]), 28) will return 30. Loops are not allowed. 
"""

# Write your code here.

import numpy as np

def nearest(x,e):

    return

"""#### Write function common_items(x1, x2)
which gets 1D arrays x1 and x2, where each data elements in each array are distinct. 
This function will return a 1D array containing the values that are found in both arrays in the order of values
in x1. For example, common_items(np.array([1,2,3,4]), np.array([0,4,2])) will return np.array([2,4]). 
Loops, set, and dict are not allowed.
"""

# Write your code here

import numpy as np

def common_items(x1,x2):
    
    return

"""### Dot method

#### Write function orthogonal_to_u(vectors, u)
which gets vectors as a 2D array, where each row represents a vector while u is a 1D array with the number of data elements equal to the number of columns in vectors.  
This function will return a 2D array where each row contains a vector from vectors that is perpendicular to u. The values in this array will in the same order as of the vectors. 
For example, orthogonal_to_u(np.array([[1,0,0], [0,1,0], [1,1,1]]), np.array([0,0,-2])) will return np.array([[1,0,0], [0,1,0]]). Loops are not allowed.
"""

# Write your code here
import numpy as np

def orthogonal_to_u(vectors, u):
    
    return

"""#### Write function to_points(grades) and gpa(grades, credits) 

Function to_points(grades) gets grades as a 1D array that a student obtained for each subject. Note that grade is represented as a letter including
A, B+, B, C+, C, D+, D and F. 
This function will tranform the 1D array grades into another 1D of grading scale, where each letter grade
A, B+, B, C+, C, D+, D and F will be mapped to the grading scale 4, 3.5, 3, 2.5, 2, 1.5, 1 and 0, respectively.
For example, to_points(np.array(["A", "B+", "D", "F"])) will return np.array([4.0, 3.5, 1.0, 0.0]). Loops are not allowed. 

Then, write function gpa(grades, credits), which gets grades ( the same input as of the to_points(grades)), 
and credits, a 1D array with the same size as of grades, containing the number of credits of each subject in the same
order as of grade. This function will return the average grade, calculated from all subjects. For example, 
gpa(np.array(["B+", "B", "D", "C+"]), np.array([3, 3, 3, 2])) will be calculated as (3.5x3 + 3x3 + 1x3 + 2.5x2)/(3+3+3+2) and returns 2.5. Note that 
Loops are not allowed.
"""

# Write your code here

import numpy as np

def to_points(grades):
    
    return

def gpa(grades, credits):
    
    return