# -*- coding: utf-8 -*-
"""Copy of HW4_graph_social_network_toStudent.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nOmwNNJHAy-nFRtijb1bFu7TdVeiDxPQ

# Assignment #4: NumPy + A few tuples/lists

### In this assignment, we will practice on NumPy, Tuple, Set, Dict using social network use case. 

**Please read the explanation in "H4.docx"**

# **Important**
- Do not delete or modify the first line in the given code cell.
- You work must be add in the provided area only. 
- You must not change the declaration of the provided functions.
- You are allowed to add your own functions.
- If you want to write your own program to test, add new code cell at the very end of the file and add your code there.
"""

import numpy as np

# DO NOTE DELETE THIS CELL / WRITE YOUR CODE HERE
# Task#1

def generate_adjacency_matrix(filename):
  # write your code here
  fn = open(filename,"r")
  r = {}
  t = set()
  for line in fn :
    a = line.strip().split(",")
    t.add(a[0])
    if a[0] not in r :
      r[a[0]] = set()
    r[a[0]].add(a[1])
  A = np.zeros((len(r),len(r)),int)
  person_names = list(dict.keys(r))
  for key in r :
    r[key] = list(r[key])
    for i in range(len(r[key])) :
      r[key][i] = person_names.index(r[key][i])
  for key in r :
    A[person_names.index(key), r[key]] = 1

  return A, person_names

# from google.colab import files
# uploaded = files.upload()
# print('uploaded = ', uploaded)

A, person_names = generate_adjacency_matrix("social_network.txt")
print(A)
print(person_names)

# DO NOTE DELETE THIS CELL / WRITE YOUR CODE HERE
# Task#2

def get_degree_matrix(A):
  # write your code here
  D = np.zeros((len(A),len(A[0])),int)
  for i in range(len(A)) :
    D[i,i] = np.sum(A[i])



  return D

D = get_degree_matrix(A)
print(D)

# DO NOTE DELETE THIS CELL / WRITE YOUR CODE HERE
# Task#3

def get_names_with_highest_number_of_friends(D, person_names):
  # write your code here
  max = list(np.where(D == np.max(D)))
  all_max = []
  for i in list(max[0]) :
    all_max.append((person_names[i],i))

  return all_max

persons = get_names_with_highest_number_of_friends(D, person_names)
print(persons)

# HELPER FUNCTION
def get_liked_page_matrix(infile):
  liked_pages = []
  persons = []
  fr = open(infile, 'r')
  for line in fr:
    name, bits = line.strip().split(',')
    liked_page = [int(c) for c in bits]
    liked_pages.append(liked_page)
    persons.append(name)
  liked_pages_array = np.array(liked_pages)
  return liked_pages_array,persons

# from google.colab import files
# uploaded = files.upload()
# print('uploaded = ', uploaded)

liked_pages, persons = get_liked_page_matrix('liked_pages.txt')
print(liked_pages)
print(persons)

# DO NOTE DELETE THIS CELL / WRITE YOUR CODE HERE
# Task#4

def get_distance_matrix(Lp):
  # write your code here
  # data = np.array([[]])
  # data=np.concatenate((data,Lp))
  data = Lp.copy()
  for i in range(len(data)) :
    for j in range(len(data[i])) :
      if data[i][j] != 0 :
        data[i][j] = j + 1
  distance_matrix = np.zeros((len(Lp),len(Lp)),float)
  for i in range(len(distance_matrix)):
    for j in range(len(distance_matrix)):
      if i == j :
        distance_matrix[i][j] = 0
      else :
        x = set(data[i])-{0}
        y = set(data[j])-{0}
        c = len(x.intersection(y))
        a = (Lp[i] == 1).sum()
        b = (Lp[j] == 1).sum()
        distance_matrix[i][j] = c / (a+b-c)
  




  return distance_matrix

Dt = get_distance_matrix(liked_pages)
print(Dt)

# DO NOTE DELETE THIS CELL / WRITE YOUR CODE HERE
# Task#5

def get_all_most_similar_pairs(Dt, persons):
  # write your code here
  max = list(np.where(Dt == np.max(Dt)))
  pairs = []
  for i in range(len(max)) :
    x = tuple(sorted((persons[max[i][0]],persons[max[i][1]])))
    if x not in pairs:
      pairs.append(x)


  return pairs

pairs = get_all_most_similar_pairs(Dt, persons)
print(pairs)