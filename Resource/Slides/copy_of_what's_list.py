# -*- coding: utf-8 -*-
"""Copy of What's List.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1b03Z7Zx4TiYBqUjxLqyU2_JtjZSMKCjy

# Introduction to Lists

[VDO](https://www.youtube.com/watch?v=6x2de5aSTkM&list=PLwnUv3sNB6_VKOYHXUN_QB3Xs3ZKMdf3g&index=1)


List can contains different kinds of data. We can use index starting from 0 to access each element of the list. 

The negative index of the list means that it goes from right to left. For example, if you use `x[-1]`, python will return the last element in the list.
"""

data=['Introduction to Python',250,1005]

x=[0,1,5,4,10,14,16,20,2]
print(x[0])
print(x[3])
print(x[-1])
print(x[-2])

"""# List Slicing

You can get **a list** from the original list using the list slicing. The format of list slicing is `list_var[start:end:step]`. The start parameter is the start index of the result list. The `end` parameter is the index of the last element before the *end*. For example, if you call `list_var[0:10]`, it will return a list that starts from 0 to 9 not 10. 

You can also use the *step* whose default value is 1. Please check this [VDO](https://www.youtube.com/watch?v=krD6do6OYXo&list=PLwnUv3sNB6_VKOYHXUN_QB3Xs3ZKMdf3g&index=2) or try it by yourself to see how do these parameters work. 
"""

x[:4]

x[2:]

x

x[:10:2]

x[::2]

x[::-1]

x[:]

x=x[:-1]

x

x=x[1:]

x

x[-3:-1]

x[:100]

"""# Basic List Operations

`len(x)` will return the length of x.

You can add two lists together and the result will be the concatination of the two lists. 

You can also multiply a list by a number. Please check below or watch this [VDO](https://www.youtube.com/watch?v=egIKZqEXj6s&list=PLwnUv3sNB6_VKOYHXUN_QB3Xs3ZKMdf3g&index=3).
"""

len(x)

[1,2,3,4]+[6,2,1,'A']

[1]+[1]+[1]+[1]

[1,2,3]*4

"""# Operations of Lists

## Addition

Same as the previous one.
"""

x=[1,2,3,4]+[6,2,1,'A']
x

"""## Find an Element in a List

The VDO is [here](https://www.youtube.com/watch?v=AnmnaQtWBL0&list=PLwnUv3sNB6_VKOYHXUN_QB3Xs3ZKMdf3g&index=4). 

The `index(object,start)` will return the first location of the object in the list. The default parameter of `start` is 0.

It will cause an exception if the `object` is not in the list. 
"""

x.index(6)

x.index(1)

l = [1,3,3,2,4,1,3,4,1,3,3]
count = 0
index = []
for i in range(len(l)) :
  if l[i] == 3 :
    count += 1
    index.append(i)
print(count,index)

if 7 in x:
  print(x.index(7))
else:
  print('Not found')

"""## Join a List

The VDO is [here](https://www.youtube.com/watch?v=Q8B93qfK-qI&list=PLwnUv3sNB6_VKOYHXUN_QB3Xs3ZKMdf3g&index=5).

You can join all string elements in the list using `str.join(list)`. This function will raise an exception if there is one or more elements in the `list` which is not the `str`.
"""

tokens=['this','is','a','cat']
print(':'.join(tokens))

s='1,2,3,4,-1,5'
s1=s.split(',')
print(':'.join(s1))

s='this   is   a    cat'
' '.join(s.split())

data=[1,2,3,4,2]
' '.join(data)****

"""## Modify a List

The VDO is [here](https://www.youtube.com/watch?v=DO4AkYCR3VQ&list=PLwnUv3sNB6_VKOYHXUN_QB3Xs3ZKMdf3g&index=6).

In this VDO, there are four basic functions that can modify the `list`. All functions are 

`append(object)` will insert the object at the end of the list.

`insert(object,index)` can insert the `object` at location `index`.

`remove(object,start)` will remove the first occurance of the `object` from the list. You can use the `start` parameter to force python to start searching from the start index. The default value of `start` is 0. **bold text**

`pop(index)` will delete the element at index `index` from the list. 
"""

x.append(100)

x.insert(3,200)

x

x.remove(200)

x

x.pop(0)

x

x

"""### Using list slicing to modify a list 

Please watch this [VDO](https://www.youtube.com/watch?v=DdmrlASCmRo&list=PLwnUv3sNB6_VKOYHXUN_QB3Xs3ZKMdf3g&index=7) and try the cells below. 
"""

x[1:3]=['a','b','c']

x

x[1:1]=[1000,2000,3000]

x

x[1:4]=[]

x

x[::2]=[1000,2000,3000,4000,5000]

x



"""# List Comprehension

We can construct a list using list comprehension. The idea is you can add elements to the list using a for loop inside. The detail is in the [VDO](https://www.youtube.com/watch?v=LnZnarhGY60&list=PLwnUv3sNB6_VKOYHXUN_QB3Xs3ZKMdf3g&index=8).   
"""

[i for i in range(10)]

[i*2 for i in range(10)]

import random 

[int(random.random()*100) for i in range(20)]

[i for i in range(2,100) if i%2 != 0 and i%3 != 0 and i%5 != 0 and i%7 != 0 and i%11 != 0 and i%13 != 0]

"""### Construct a List"""

! gdown https://drive.google.com/uc?id=1wpYx8rvGohvy_TLEfYgaKRYpyy2Z1ZST

y=x

x

y

x[0]=10

x

y

z=list(x)

z

x[0]=1000

x

y

z

"""#### readlines() 

Instead of using `readline()` or using `for line in file`, the `readlines()` function can be used. The result returns from the `readlines()` is a list of all lines in the file. 

The detail is in the [VDO](https://www.youtube.com/watch?v=EN6nZjuX_uQ&list=PLwnUv3sNB6_VKOYHXUN_QB3Xs3ZKMdf3g&index=9). 
"""

file=open('score.csv')
for line in file:
  print(line,end='')
file.close()

file=open('score.csv')
lines=file.readlines()
file.close()
lines

lines=[line.strip() for line in lines]

lines[0].split(',')

s='this is a cat'
s.split()

IDs=[line.split(',')[0] for line in lines[1:]]

"""### `sum(list)` function

The `sum(list)` function will return the summation of all elements in the list. The example is in the [VDO](https://www.youtube.com/watch?v=XEEJLHmpTg0&list=PLwnUv3sNB6_VKOYHXUN_QB3Xs3ZKMdf3g&index=10). 
"""

sum(x[::2])

for c in x:
  print(c)

scores=[sum([int(e) for e in line.split(',')[1:]]) for line in lines[1:]]

[[IDs[i],scores[i]] for i in range(len(IDs))]

[[line.split(',')[0],sum([int(e) for e in line.split(',')[1:]])] for line in lines[1:]]

"""#### `sort()` function 

We can use `list.sort()` or `sorted(list)` to sort all elements in the `list`. The `.sort()` will sort and change the original list but the `sorted()` function will return a new list and does not change order of elements in the list. 

You can use `reverse=True` parameter to sort descendingly. If you omit this parameter, python will sort the input list ascendingly. 

The detail is in this [VDO](https://www.youtube.com/watch?v=DIgpQXnSH_E&list=PLwnUv3sNB6_VKOYHXUN_QB3Xs3ZKMdf3g&index=11).
"""

data=[int(random.random()*100) for i in range(20)]
sorted(data,reverse=True) # sorted will generate the new list of sorted value

data.sort() #inplace sort

data

data=[[1,2],[1,3],[2,4],[5,7]]
sorted(data,reverse=True)

sorted([sum([int(e) for e in line.split(',')[1:]]) for line in lines[1:]],reverse=True)

sum_scores=[[line.split(',')[0],sum([int(e) for e in line.split(',')[1:]])] for line in lines[1:]]

sorted([[element[1],element[0]] for element in sum_scores],reverse=True)

sum_scores[:10]

"""#### Create a new file. 

The VDO explaining this section is [here](https://www.youtube.com/watch?v=DIgpQXnSH_E&list=PLwnUv3sNB6_VKOYHXUN_QB3Xs3ZKMdf3g&index=12).

Read all scores from the file and add summation of all quizzes from each student.
"""

file=open('score.csv')
lines=file.readlines()
file.close()

lines=[line.strip() for line in lines]

file=open('output.csv','w')
for line in lines[1:]:
  quiz_score=line.split(',')[1:]
  sum_of_score=sum([int(score) for score in quiz_score])
  print(line+','+str(sum_of_score))
  file.write(line+','+str(sum_of_score)+'\n')
file.close()

! more output.csv

"""#### Sort score by summation of all quizzes. 

This time, we will sort all scores by the summation and save the results in an output file. The detail is in this [VDO](https://www.youtube.com/watch?v=55MgOiPu6Yc&list=PLwnUv3sNB6_VKOYHXUN_QB3Xs3ZKMdf3g&index=13)
"""

sum_score=sorted([ [sum([int(e) for e in line.split(',')[1:]]),line] for line in lines[1:]],reverse=True)

file=open('sorted_score.csv','w')
for element in sum_score:
  file.write(element[1]+','+str(element[0])+'\n')
file.close()

! more sorted_score.csv

